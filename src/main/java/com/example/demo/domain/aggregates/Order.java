package com.example.demo.domain.aggregates;

import java.util.List;
import java.util.UUID;

import org.springframework.data.domain.AbstractAggregateRoot;

import com.example.demo.domain.commands.CreateOrderCommand;
import com.example.demo.domain.events.OrderCreatedEvent;
import com.example.demo.domain.events.OrderCreatedEventData;
import com.example.demo.domain.events.OrderScheduledEvent;
import com.example.demo.domain.events.OrderScheduledEventData;
import com.example.demo.domain.valueobjects.OrderItem;
import com.example.demo.domain.valueobjects.OrderStatus;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.OneToMany;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.extern.log4j.Log4j;

@Log4j

@Getter
@NoArgsConstructor
@AllArgsConstructor

@NamedQueries({
  @NamedQuery(name = "order.findByOrderId", query = "select o from orders o where o.orderId = :orderId")
})

@Entity(name = "orders") // Bind the entity to the DB orders table
public class Order extends AbstractAggregateRoot<Order> {

  @Id
  @GeneratedValue(strategy = GenerationType.UUID)
  private String id;

  @Column(name="bus_order_id", unique = true)
  private String orderId; // This is a domain business id that will be used instead of the primary key id attribute. The reason is that primary is autogenerated by Hibernate a bit late during the repo persistence, and we won't have the right identifier when registering the event

  @OneToMany(cascade = CascadeType.ALL)
  @JoinColumn(name = "order_id")
  private List<OrderItem> orderItems;

  @Enumerated(EnumType.STRING)
  @Column(name = "order_status")
  private OrderStatus orderStatus;

  // Create order command handler
  public Order(CreateOrderCommand createOrderCommand) {
    this.id = createOrderCommand.getId();
    this.orderId = createOrderCommand.getId();
    log.debug("Manually generated id for a new order id: " + this.orderId);
    this.orderItems = createOrderCommand.getItems();
    this.orderStatus = OrderStatus.CREATED;
    addDomainEvent(
        new OrderCreatedEvent(
            new OrderCreatedEventData(this.orderId)));
  }

  public void scheduleToShip() {
    this.orderStatus = OrderStatus.SCHEDULED_FOR_SHIPPING;
    addDomainEvent(new OrderScheduledEvent(
        new OrderScheduledEventData(this.id)));
  }

  private void addDomainEvent(Object event) {
    registerEvent(event);
  }

  @Override
  public String toString() {
    return "Order{" + "id='" + this.id + '\'' + ", orderStatus=" + this.orderStatus + '}';
  }

}
